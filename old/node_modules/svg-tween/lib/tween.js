'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tweenPaths = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _tweening = require('tweening');

var _tweening2 = _interopRequireDefault(_tweening);

var _svgPoints = require('svg-points');

var _match = require('./match');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tweenPaths = function tweenPaths(_ref) {
  var complete = _ref.complete,
      duration = _ref.duration,
      easing = _ref.easing,
      from = _ref.from,
      next = _ref.next,
      to = _ref.to;

  var f = Array.isArray(from) ? from.map(function (d) {
    return { type: 'path', d: d };
  }) : { type: 'path', d: from };

  var t = Array.isArray(to) ? to.map(function (d) {
    return { type: 'path', d: d };
  }) : { type: 'path', d: to };

  tween({ complete: complete, duration: duration, easing: easing, from: f, next: next, to: t });
};

var tween = function tween(_ref2) {
  var _complete = _ref2.complete,
      duration = _ref2.duration,
      easing = _ref2.easing,
      from = _ref2.from,
      _ref2$middleware = _ref2.middleware,
      middleware = _ref2$middleware === undefined ? [] : _ref2$middleware,
      _next = _ref2.next,
      to = _ref2.to;

  var fs = Array.isArray(from) ? from : [from];
  var ts = Array.isArray(to) ? to : [to];

  var fp = fs.map(_svgPoints.toPoints);
  var tp = ts.map(_svgPoints.toPoints);

  var _matchPointArrays = (0, _match.matchPointArrays)(fp, tp),
      _matchPointArrays2 = _slicedToArray(_matchPointArrays, 2),
      f = _matchPointArrays2[0],
      t = _matchPointArrays2[1];

  (0, _tweening2.default)({
    complete: function complete() {
      if (typeof _next === 'function') {
        tp.forEach(function (p, i) {
          return _next((0, _svgPoints.toPath)(p), i);
        });
      }

      if (typeof _complete === 'function') {
        _complete();
      }
    },
    duration: duration,
    easing: easing,
    from: f,
    middleware: middleware,
    next: function next(points) {
      if (typeof _next === 'function') {
        points.forEach(function (p, i) {
          return _next((0, _svgPoints.toPath)(p), i);
        });
      }
    },
    to: t
  });
};

exports.tweenPaths = tweenPaths;
exports.default = tween;