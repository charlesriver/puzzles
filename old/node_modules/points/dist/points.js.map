{"version":3,"file":"points.js","sources":["../src/arcToBezier.js","../src/helpers.js","../src/cubify.js","../src/add.js","../src/length.js","../src/decurve.js","../src/boundingBox.js","../src/moveIndex.js","../src/offset.js","../src/position.js","../src/remove.js","../src/reverse.js","../src/rotate.js","../src/scale.js"],"sourcesContent":["// I extracted this from the a2c function from\n// SVG path – https://github.com/fontello/svgpath\n//\n// All credit goes to:\n//\n// Sergey Batishchev – https://github.com/snb2013\n// Vitaly Puzrin – https://github.com/puzrin\n// Alex Kocharin – https://github.com/rlidwka\n\nconst TAU = Math.PI * 2\n\nconst mapToEllipse = ({ x, y }, rx, ry, cosphi, sinphi, centerx, centery) => {\n  x *= rx\n  y *= ry\n\n  const xp = cosphi * x - sinphi * y\n  const yp = sinphi * x + cosphi * y\n\n  return {\n    x: xp + centerx,\n    y: yp + centery\n  }\n}\n\nconst approxUnitArc = (ang1, ang2) => {\n  const a = 4 / 3 * Math.tan(ang2 / 4)\n\n  const x1 = Math.cos(ang1)\n  const y1 = Math.sin(ang1)\n  const x2 = Math.cos(ang1 + ang2)\n  const y2 = Math.sin(ang1 + ang2)\n\n  return [\n    {\n      x: x1 - y1 * a,\n      y: y1 + x1 * a\n    },\n    {\n      x: x2 + y2 * a,\n      y: y2 - x2 * a\n    },\n    {\n      x: x2,\n      y: y2\n    }\n  ]\n}\n\nconst vectorAngle = (ux, uy, vx, vy) => {\n  const sign = (ux * vy - uy * vx < 0) ? -1 : 1\n  const umag = Math.sqrt(ux * ux + uy * uy)\n  const vmag = Math.sqrt(ux * ux + uy * uy)\n  const dot = ux * vx + uy * vy\n\n  let div = dot / (umag * vmag)\n\n  if (div > 1) {\n    div = 1\n  }\n\n  if (div < -1) {\n    div = -1\n  }\n\n  return sign * Math.acos(div)\n}\n\nconst getArcCenter = (\n  px,\n  py,\n  cx,\n  cy,\n  rx,\n  ry,\n  largeArcFlag,\n  sweepFlag,\n  sinphi,\n  cosphi,\n  pxp,\n  pyp\n) => {\n  const rxsq = Math.pow(rx, 2)\n  const rysq = Math.pow(ry, 2)\n  const pxpsq = Math.pow(pxp, 2)\n  const pypsq = Math.pow(pyp, 2)\n\n  let radicant = (rxsq * rysq) - (rxsq * pypsq) - (rysq * pxpsq)\n\n  if (radicant < 0) {\n    radicant = 0\n  }\n\n  radicant /= (rxsq * pypsq) + (rysq * pxpsq)\n  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1)\n\n  const centerxp = radicant * rx / ry * pyp\n  const centeryp = radicant * -ry / rx * pxp\n\n  const centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2\n  const centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2\n\n  const vx1 = (pxp - centerxp) / rx\n  const vy1 = (pyp - centeryp) / ry\n  const vx2 = (-pxp - centerxp) / rx\n  const vy2 = (-pyp - centeryp) / ry\n\n  let ang1 = vectorAngle(1, 0, vx1, vy1)\n  let ang2 = vectorAngle(vx1, vy1, vx2, vy2)\n\n  if (sweepFlag === 0 && ang2 > 0) {\n    ang2 -= TAU\n  }\n\n  if (sweepFlag === 1 && ang2 < 0) {\n    ang2 += TAU\n  }\n\n  return [ centerx, centery, ang1, ang2 ]\n}\n\nconst arcToBezier = ({\n  px,\n  py,\n  cx,\n  cy,\n  rx,\n  ry,\n  xAxisRotation = 0,\n  largeArcFlag = 0,\n  sweepFlag = 0\n}) => {\n  const curves = []\n\n  if (rx === 0 || ry === 0) {\n    return []\n  }\n\n  const sinphi = Math.sin(xAxisRotation * TAU / 360)\n  const cosphi = Math.cos(xAxisRotation * TAU / 360)\n\n  const pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2\n  const pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2\n\n  if (pxp === 0 && pyp === 0) {\n    return []\n  }\n\n  rx = Math.abs(rx)\n  ry = Math.abs(ry)\n\n  const lambda =\n    Math.pow(pxp, 2) / Math.pow(rx, 2) +\n    Math.pow(pyp, 2) / Math.pow(ry, 2)\n\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda)\n    ry *= Math.sqrt(lambda)\n  }\n\n  let [ centerx, centery, ang1, ang2 ] = getArcCenter(\n    px,\n    py,\n    cx,\n    cy,\n    rx,\n    ry,\n    largeArcFlag,\n    sweepFlag,\n    sinphi,\n    cosphi,\n    pxp,\n    pyp\n  )\n\n  const segments = Math.max(Math.ceil(Math.abs(ang2) / (TAU / 4)), 1)\n\n  ang2 /= segments\n\n  for (let i = 0; i < segments; i++) {\n    curves.push(approxUnitArc(ang1, ang2))\n    ang1 += ang2\n  }\n\n  return curves.map(curve => {\n    const { x: x1, y: y1 } = mapToEllipse(curve[ 0 ], rx, ry, cosphi, sinphi, centerx, centery)\n    const { x: x2, y: y2 } = mapToEllipse(curve[ 1 ], rx, ry, cosphi, sinphi, centerx, centery)\n    const { x, y } = mapToEllipse(curve[ 2 ], rx, ry, cosphi, sinphi, centerx, centery)\n\n    return { x1, y1, x2, y2, x, y }\n  })\n}\n\nexport default arcToBezier\n","const angleFromSides = (a, b, c) => {\n  const r = Math.acos(\n    (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) /\n    (2 * a * b)\n  )\n\n  return r * (180 / Math.PI)\n}\n\nconst applyFuncToShapes = (f, s, ...args) => {\n  if (isShapeArray(s)) {\n    return s.map(shape => f(shape, ...args))\n  }\n\n  return f(s, ...args)\n}\n\nconst getShapeArray = s => isShapeArray(s) ? s : [ s ]\n\nconst isShapeArray = s => Array.isArray(s[ 0 ])\n\nconst numberAtInterval = (a, b, interval) => {\n  const c = a === b ? 0 : Math.abs(b - a)\n  return c === 0 ? a : (a < b ? a + c * interval : a - c * interval)\n}\n\nexport {\n  angleFromSides,\n  applyFuncToShapes,\n  getShapeArray,\n  isShapeArray,\n  numberAtInterval\n}\n","import arcToBezier from './arcToBezier'\nimport { applyFuncToShapes } from './helpers'\n\nconst cubifyShape = shape => {\n  const s = []\n\n  for (let i = 0, l = shape.length; i < l; i++) {\n    const point = shape[ i ]\n\n    if (point.curve && point.curve.type !== 'cubic') {\n      const { x: px, y: py } = shape[ i - 1 ]\n      const { x: cx, y: cy } = point\n\n      if (point.curve.type === 'arc') {\n        const curves = arcToBezier({\n          px,\n          py,\n          cx,\n          cy,\n          rx: point.curve.rx,\n          ry: point.curve.ry,\n          xAxisRotation: point.curve.xAxisRotation,\n          largeArcFlag: point.curve.largeArcFlag,\n          sweepFlag: point.curve.sweepFlag\n        })\n\n        curves.forEach(({ x1, y1, x2, y2, x, y }) => {\n          s.push({ x, y, curve: { type: 'cubic', x1, y1, x2, y2 } })\n        })\n      } else if (point.curve.type === 'quadratic') {\n        const x1 = px + (2 / 3 * (point.curve.x1 - px))\n        const y1 = py + (2 / 3 * (point.curve.y1 - py))\n        const x2 = cx + (2 / 3 * (point.curve.x1 - cx))\n        const y2 = cy + (2 / 3 * (point.curve.y1 - cy))\n\n        s.push({ x: cx, y: cy, curve: { type: 'cubic', x1, y1, x2, y2 } })\n      }\n    } else {\n      s.push(point)\n    }\n  }\n\n  return s\n}\n\nconst cubify = s => applyFuncToShapes(cubifyShape, s)\n\nexport default cubify\n","import cubify from './cubify'\nimport { numberAtInterval } from './helpers'\n\nconst linearPoints = (from, to) => [\n  {\n    x: numberAtInterval(from.x, to.x, 0.5),\n    y: numberAtInterval(from.y, to.y, 0.5)\n  },\n  to\n]\n\nconst curvedPoints = (from, to) => {\n  const { x1, y1, x2, y2 } = to.curve\n\n  const A = { x: from.x, y: from.y }\n  const B = { x: x1, y: y1 }\n  const C = { x: x2, y: y2 }\n  const D = { x: to.x, y: to.y }\n  const E = { x: numberAtInterval(A.x, B.x, 0.5), y: numberAtInterval(A.y, B.y, 0.5) }\n  const F = { x: numberAtInterval(B.x, C.x, 0.5), y: numberAtInterval(B.y, C.y, 0.5) }\n  const G = { x: numberAtInterval(C.x, D.x, 0.5), y: numberAtInterval(C.y, D.y, 0.5) }\n  const H = { x: numberAtInterval(E.x, F.x, 0.5), y: numberAtInterval(E.y, F.y, 0.5) }\n  const J = { x: numberAtInterval(F.x, G.x, 0.5), y: numberAtInterval(F.y, G.y, 0.5) }\n  const K = { x: numberAtInterval(H.x, J.x, 0.5), y: numberAtInterval(H.y, J.y, 0.5) }\n\n  return [\n    { x: K.x, y: K.y, curve: { type: 'cubic', x1: E.x, y1: E.y, x2: H.x, y2: H.y } },\n    { x: D.x, y: D.y, curve: { type: 'cubic', x1: J.x, y1: J.y, x2: G.x, y2: G.y } }\n  ]\n}\n\nconst points = (from, to) => to.curve\n  ? curvedPoints(from, to)\n  : linearPoints(from, to)\n\nconst addPoints = (shape, pointsRequired) => {\n  if (isNaN(pointsRequired)) {\n    throw Error('`add` function must be passed a number as the second argument')\n  }\n\n  const nextShape = [ ...shape ]\n\n  for (let i = 1; i < nextShape.length;) {\n    if (nextShape.length >= pointsRequired) {\n      return nextShape\n    }\n\n    const to = nextShape[ i ]\n\n    if (to.moveTo) {\n      i++\n    } else {\n      const from = nextShape[ i - 1 ]\n      const [ midPoint, replacementPoint ] = points(from, to)\n\n      nextShape.splice(i, 1, midPoint, replacementPoint)\n\n      i += 2\n    }\n  }\n\n  return addPoints(nextShape, pointsRequired)\n}\n\nconst add = (shape, pointsRequired) => addPoints(cubify(shape), pointsRequired)\n\nexport { curvedPoints }\nexport default add\n","import decurve from './decurve'\n\nconst length = (shape, accuracy) => {\n  const s = decurve(shape, accuracy)\n\n  return s.reduce((currentLength, { x: x2, y: y2, moveTo }, i) => {\n    if (!moveTo) {\n      const { x: x1, y: y1 } = s[ i - 1 ]\n      currentLength += linearLength(x1, y1, x2, y2)\n    }\n\n    return currentLength\n  }, 0)\n}\n\nconst linearLength = (x1, y1, x2, y2) => Math.sqrt(\n  Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2)\n)\n\nexport { linearLength }\nexport default length\n","import { angleFromSides } from './helpers'\nimport cubify from './cubify'\nimport { curvedPoints } from './add'\nimport { linearLength } from './length'\n\nconst angle = triangle => {\n  const [ ax, ay ] = triangle[ 0 ]\n  const [ bx, by ] = triangle[ 1 ]\n  const [ cx, cy ] = triangle[ 2 ]\n\n  const a = linearLength(ax, ay, bx, by)\n  const b = linearLength(bx, by, cx, cy)\n  const c = linearLength(cx, cy, ax, ay)\n\n  return angleFromSides(a, b, c)\n}\n\nconst curved = shape => shape.reduce((c, { curve }) => curve ? true : c, false)\n\nconst decurve = (shape, accuracy = 1) => {\n  if (!curved(shape)) {\n    return shape\n  }\n\n  const s = cubify(shape)\n  const d = []\n\n  s.map((point, i) => {\n    if (point.curve) {\n      const prevPoint = s[ i - 1 ]\n      straighten(prevPoint, point, accuracy)\n        .map(p => d.push(p))\n    } else {\n      d.push(point)\n    }\n  })\n\n  return d\n}\n\nconst straight = (x1, y1, cx1, cy1, x2, y2, cx2, cy2, accuracy) => {\n  const t1 = [[ cx1, cy1 ], [ x2, y2 ], [ x1, y1 ]]\n  const t2 = [[ cx2, cy2 ], [ x1, y1 ], [ x2, y2 ]]\n  return angle(t1) < accuracy && angle(t2) < accuracy\n}\n\nconst straighten = (prevPoint, point, accuracy) => {\n  const { x: x1, y: y1 } = prevPoint\n  const { x: x2, y: y2, curve } = point\n  const { x1: cx1, y1: cy1, x2: cx2, y2: cy2 } = curve\n\n  if (straight(x1, y1, cx1, cy1, x2, y2, cx2, cy2, accuracy)) {\n    return [ point ]\n  }\n\n  const [ midPoint, lastPoint ] = curvedPoints(prevPoint, point)\n\n  return [\n    ...straighten(prevPoint, midPoint, accuracy),\n    ...straighten(midPoint, lastPoint, accuracy)\n  ]\n}\n\nexport default decurve\n","import decurve from './decurve'\nimport { getShapeArray } from './helpers'\n\nconst boundingBox = s => {\n  let bottom\n  let left\n  let right\n  let top\n\n  const shapes = getShapeArray(s)\n\n  shapes.map(shape => decurve(shape).map(({ x, y }) => {\n    if (typeof bottom !== 'number' || y > bottom) {\n      bottom = y\n    }\n\n    if (typeof left !== 'number' || x < left) {\n      left = x\n    }\n\n    if (typeof right !== 'number' || x > right) {\n      right = x\n    }\n\n    if (typeof top !== 'number' || y < top) {\n      top = y\n    }\n  }))\n\n  return {\n    bottom,\n    center: {\n      x: left + ((right - left) / 2),\n      y: top + ((bottom - top) / 2)\n    },\n    left,\n    right,\n    top\n  }\n}\n\nexport default boundingBox\n","const countLinePoints = lines => lines.reduce((count, points) => (\n  count + countPoints(points)\n), 0)\n\nconst countPoints = points => points.length - (isJoined(points) ? 1 : 0)\n\nconst isJoined = points => {\n  const firstPoint = points[ 0 ]\n  const lastPoint = points[ points.length - 1 ]\n  return firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y\n}\n\nconst joinLines = lines => lines.reduce((shape, line) => (\n  [ ...shape, ...line ]\n), [])\n\nconst moveIndex = (shape, offset) => {\n  const lines = splitLines(shape)\n  const count = countLinePoints(lines)\n  const normalisedOffset = ((offset % count) + count) % count\n\n  if (!normalisedOffset) {\n    return shape\n  }\n\n  const { lineIndex, pointIndex } = nextIndex(lines, normalisedOffset)\n  const reorderedLines = reorderLines(lines, lineIndex)\n  const firstLine = reorderPoints(reorderedLines[ 0 ], pointIndex)\n  const restOfLines = [ ...reorderedLines ].splice(1)\n\n  return joinLines([ firstLine, ...restOfLines ])\n}\n\nconst nextIndex = (lines, offset) => {\n  for (let i = 0, l = lines.length; i < l; i++) {\n    const count = countPoints(lines[ i ])\n\n    if (offset <= count - 1) {\n      return {\n        lineIndex: i,\n        pointIndex: offset\n      }\n    }\n\n    offset -= count\n  }\n}\n\nconst reorderLines = (lines, offset) => [ ...lines ]\n  .splice(offset)\n  .concat([ ...lines ].splice(0, offset))\n\nconst reorderPoints = (points, offset) => {\n  if (!offset) {\n    return points\n  }\n\n  const nextPoints = [\n    { x: points[ offset ].x, y: points[ offset ].y, moveTo: true },\n    ...[ ...points ].splice(offset + 1)\n  ]\n\n  if (isJoined(points)) {\n    return [\n      ...nextPoints,\n      ...[ ...points ].splice(1, offset)\n    ]\n  }\n\n  return [\n    ...nextPoints,\n    ...[ ...points ].splice(0, offset + 1)\n  ]\n}\n\nconst splitLines = shape => shape.reduce((lines, point) => {\n  if (point.moveTo) {\n    lines.push([])\n  }\n\n  lines[ lines.length - 1 ].push(point)\n\n  return lines\n}, [])\n\nexport default moveIndex\n","import { applyFuncToShapes } from './helpers'\n\nconst offsetPoints = (shape, x, y) => shape.map(point => {\n  const p = { ...point }\n\n  p.x += x\n  p.y += y\n\n  if (p.curve) {\n    p.curve = { ...p.curve }\n\n    if (p.curve.type === 'quadratic' || p.curve.type === 'cubic') {\n      p.curve.x1 += x\n      p.curve.y1 += y\n    }\n\n    if (p.curve.type === 'cubic') {\n      p.curve.x2 += x\n      p.curve.y2 += y\n    }\n  }\n\n  return p\n})\n\nconst offset = (s, x = 0, y = 0) => applyFuncToShapes(offsetPoints, s, x, y)\n\nexport default offset\n","import decurve from './decurve'\nimport length, { linearLength } from './length'\nimport { angleFromSides, numberAtInterval } from './helpers'\n\nconst angle = (x1, y1, x2, y2, a) => {\n  if (x1 === x2) {\n    return y1 >= y2 ? 0 : 180\n  }\n\n  const b = 100\n  const c = linearLength(x2, y2, x1, y1 - b)\n  const ang = angleFromSides(a, b, c)\n\n  return x1 < x2 ? ang : 360 - ang\n}\n\nconst over = (shape, length, totalLength, desiredLength) => {\n  const { x: x1, y: y1 } = shape[ length - 2 ]\n  const { x: x2, y: y2 } = shape[ length - 1 ]\n  const segmentLength = linearLength(x1, y1, x2, y2)\n  const segmentInterval = (desiredLength - totalLength) / segmentLength + 1\n  return { x1, y1, x2, y2, segmentInterval, segmentLength }\n}\n\nconst position = (shape, interval, accuracy) => {\n  const s = decurve(shape, accuracy)\n  const l = s.length\n  const t = length(s)\n  const d = t * interval\n\n  const { x1, y1, x2, y2, segmentInterval, segmentLength } =\n    interval > 1 ? over(s, l, t, d)\n      : (interval < 0 ? under(s, d) : within(s, l, d))\n\n  return {\n    angle: angle(x1, y1, x2, y2, segmentLength),\n    x: numberAtInterval(x1, x2, segmentInterval),\n    y: numberAtInterval(y1, y2, segmentInterval)\n  }\n}\n\nconst under = (shape, desiredLength) => {\n  const { x: x1, y: y1 } = shape[ 0 ]\n  const { x: x2, y: y2 } = shape[ 1 ]\n  const segmentLength = linearLength(x1, y1, x2, y2)\n  const segmentInterval = desiredLength / segmentLength\n  return { x1, y1, x2, y2, segmentInterval, segmentLength }\n}\n\nconst within = (shape, length, desiredLength) => {\n  let currentLength = 0\n\n  for (let i = 0; i < length; i++) {\n    const { moveTo } = shape[ i ]\n\n    if (!moveTo) {\n      const { x: x1, y: y1 } = shape[ i - 1 ]\n      const { x: x2, y: y2 } = shape[ i ]\n\n      const segmentLength = linearLength(x1, y1, x2, y2)\n\n      if (currentLength + segmentLength >= desiredLength) {\n        const segmentInterval = (desiredLength - currentLength) / segmentLength\n        return { x1, y1, x2, y2, segmentInterval, segmentLength }\n      }\n\n      currentLength += segmentLength\n    }\n  }\n}\n\nexport default position\n","import { applyFuncToShapes } from './helpers'\n\nconst isBetween = (a, b, c) => {\n  if (b.curve || c.curve) {\n    return false\n  }\n\n  const crossProduct =\n    (c.y - a.y) *\n    (b.x - a.x) -\n    (c.x - a.x) *\n    (b.y - a.y)\n\n  if (Math.abs(crossProduct) > Number.EPSILON) {\n    return false\n  }\n\n  const dotProduct =\n    (c.x - a.x) *\n    (b.x - a.x) +\n    (c.y - a.y) *\n    (b.y - a.y)\n\n  if (dotProduct < 0) {\n    return false\n  }\n\n  const squaredLengthBA =\n    (b.x - a.x) *\n    (b.x - a.x) +\n    (b.y - a.y) *\n    (b.y - a.y)\n\n  if (dotProduct > squaredLengthBA) {\n    return false\n  }\n\n  return true\n}\n\nconst removePoints = shape => {\n  const s = []\n\n  for (let i = 0, l = shape.length; i < l; i++) {\n    const a = s[ s.length - 1 ]\n    const b = shape[ i + 1 ]\n    const c = shape[ i ]\n\n    if (!(a && b && c) || !(isBetween(a, b, c))) {\n      s.push(c)\n    }\n  }\n\n  return s\n}\n\nconst remove = s => applyFuncToShapes(removePoints, s)\n\nexport default remove\n","import cubify from './cubify'\nimport { applyFuncToShapes } from './helpers'\n\nconst reversePoints = shape => {\n  let m\n  let c\n\n  return shape.reverse().map(({ x, y, moveTo, curve }, i) => {\n    const point = { x, y }\n\n    if (c) {\n      const { x1: x2, y1: y2, x2: x1, y2: y1 } = c\n      point.curve = { type: 'cubic', x1, y1, x2, y2 }\n    }\n\n    if (i === 0 || m) {\n      point.moveTo = true\n    }\n\n    m = moveTo\n    c = curve || null\n\n    return point\n  })\n}\n\nconst reverse = s => applyFuncToShapes(reversePoints, cubify(s))\n\nexport default reverse\n","import { applyFuncToShapes } from './helpers'\nimport boundingBox from './boundingBox'\n\nconst rotatePoint = (x, y, c, s, about) => {\n  const { x: offsetX, y: offsetY } = about\n  const relativeX = x - offsetX\n  const relativeY = y - offsetY\n\n  return [\n    (relativeX * c - relativeY * s) + offsetX,\n    (relativeX * s + relativeY * c) + offsetY\n  ]\n}\n\nconst rotatePoints = (shape, angle, about) => shape.map(point => {\n  const r = angle * Math.PI / 180\n  const c = Math.cos(r)\n  const s = Math.sin(r)\n  const [ x, y ] = rotatePoint(point.x, point.y, c, s, about)\n  const p = { ...point, x, y }\n\n  if (p.curve) {\n    if (p.curve.type === 'quadratic' || p.curve.type === 'cubic') {\n      const [ x1, y1 ] = rotatePoint(p.curve.x1, p.curve.y1, c, s, about)\n      p.curve = { ...p.curve, x1, y1 }\n    }\n\n    if (p.curve.type === 'cubic') {\n      const [ x2, y2 ] = rotatePoint(p.curve.x2, p.curve.y2, c, s, about)\n      p.curve = { ...p.curve, x2, y2 }\n    }\n  }\n\n  return p\n})\n\nconst rotate = (s, angle) => {\n  const { center: about } = boundingBox(s)\n  return applyFuncToShapes(rotatePoints, s, angle, about)\n}\n\nexport default rotate\n","import boundingBox from './boundingBox'\nimport { applyFuncToShapes } from './helpers'\n\nconst scalePoint = (point, scaleFactor, anchorX, anchorY) => {\n  const p = { ...point }\n\n  p.x = anchorX - ((anchorX - p.x) * scaleFactor)\n  p.y = anchorY - ((anchorY - p.y) * scaleFactor)\n\n  if (point.curve) {\n    p.curve = { ...p.curve }\n\n    if (p.curve.type === 'arc') {\n      if (p.curve.rx) {\n        p.curve.rx = p.curve.rx * scaleFactor\n      }\n\n      if (p.curve.ry) {\n        p.curve.ry = p.curve.ry * scaleFactor\n      }\n    } else {\n      p.curve.x1 = anchorX - ((anchorX - p.curve.x1) * scaleFactor)\n      p.curve.y1 = anchorY - ((anchorY - p.curve.y1) * scaleFactor)\n\n      if (p.curve.type === 'cubic') {\n        p.curve.x2 = anchorX - ((anchorX - p.curve.x2) * scaleFactor)\n        p.curve.y2 = anchorY - ((anchorY - p.curve.y2) * scaleFactor)\n      }\n    }\n  }\n\n  return p\n}\n\nconst scale = (s, scaleFactor, anchor = 'center') => {\n  const { bottom, center, left, right, top } = boundingBox(s)\n\n  let anchorX = center.x\n  let anchorY = center.y\n\n  switch (anchor) {\n    case 'topLeft':\n      anchorX = left\n      anchorY = top\n      break\n    case 'topRight':\n      anchorX = right\n      anchorY = top\n      break\n    case 'bottomRight':\n      anchorX = right\n      anchorY = bottom\n      break\n    case 'bottomLeft':\n      anchorX = left\n      anchorY = bottom\n      break\n  }\n\n  return applyFuncToShapes(shape => shape.map(point => {\n    return scalePoint(point, scaleFactor, anchorX, anchorY)\n  }), s)\n}\n\nexport default scale\n"],"names":["TAU","Math","PI","mapToEllipse","rx","ry","cosphi","sinphi","centerx","centery","x","y","xp","yp","approxUnitArc","ang1","ang2","a","tan","x1","cos","y1","sin","x2","y2","vectorAngle","ux","uy","vx","vy","sign","umag","sqrt","vmag","dot","div","acos","getArcCenter","px","py","cx","cy","largeArcFlag","sweepFlag","pxp","pyp","rxsq","pow","rysq","pxpsq","pypsq","radicant","centerxp","centeryp","vx1","vy1","vx2","vy2","arcToBezier","xAxisRotation","curves","abs","lambda","segments","max","ceil","i","push","map","curve","angleFromSides","b","c","r","applyFuncToShapes","f","s","args","isShapeArray","shape","getShapeArray","Array","isArray","numberAtInterval","interval","cubifyShape","l","length","point","type","forEach","cubify","linearPoints","from","to","curvedPoints","A","B","C","D","E","F","G","H","J","K","points","addPoints","pointsRequired","isNaN","Error","nextShape","moveTo","midPoint","replacementPoint","splice","add","accuracy","decurve","reduce","currentLength","linearLength","angle","triangle","ax","ay","bx","by","curved","d","prevPoint","p","straight","cx1","cy1","cx2","cy2","t1","t2","straighten","lastPoint","boundingBox","bottom","left","right","top","shapes","countLinePoints","lines","count","countPoints","isJoined","firstPoint","joinLines","line","moveIndex","offset","splitLines","normalisedOffset","nextIndex","lineIndex","pointIndex","reorderedLines","reorderLines","firstLine","reorderPoints","restOfLines","concat","nextPoints","offsetPoints","ang","over","totalLength","desiredLength","segmentLength","segmentInterval","position","t","under","within","isBetween","crossProduct","Number","EPSILON","dotProduct","squaredLengthBA","removePoints","remove","reversePoints","m","reverse","rotatePoint","about","offsetX","offsetY","relativeX","relativeY","rotatePoints","rotate","center","scalePoint","scaleFactor","anchorX","anchorY","scale","anchor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AASA,IAAMA,MAAMC,KAAKC,EAAL,GAAU,CAAtB;;AAEA,IAAMC,eAAe,SAAfA,YAAe,OAAWC,EAAX,EAAeC,EAAf,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,OAAnC,EAA4CC,OAA5C,EAAwD;MAArDC,CAAqD,QAArDA,CAAqD;MAAlDC,CAAkD,QAAlDA,CAAkD;;OACtEP,EAAL;OACKC,EAAL;;MAEMO,KAAKN,SAASI,CAAT,GAAaH,SAASI,CAAjC;MACME,KAAKN,SAASG,CAAT,GAAaJ,SAASK,CAAjC;;SAEO;OACFC,KAAKJ,OADH;OAEFK,KAAKJ;GAFV;CAPF;;AAaA,IAAMK,gBAAgB,SAAhBA,aAAgB,CAACC,IAAD,EAAOC,IAAP,EAAgB;MAC9BC,IAAI,IAAI,CAAJ,GAAQhB,KAAKiB,GAAL,CAASF,OAAO,CAAhB,CAAlB;;MAEMG,KAAKlB,KAAKmB,GAAL,CAASL,IAAT,CAAX;MACMM,KAAKpB,KAAKqB,GAAL,CAASP,IAAT,CAAX;MACMQ,KAAKtB,KAAKmB,GAAL,CAASL,OAAOC,IAAhB,CAAX;MACMQ,KAAKvB,KAAKqB,GAAL,CAASP,OAAOC,IAAhB,CAAX;;SAEO,CACL;OACKG,KAAKE,KAAKJ,CADf;OAEKI,KAAKF,KAAKF;GAHV,EAKL;OACKM,KAAKC,KAAKP,CADf;OAEKO,KAAKD,KAAKN;GAPV,EASL;OACKM,EADL;OAEKC;GAXA,CAAP;CARF;;AAwBA,IAAMC,cAAc,SAAdA,WAAc,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAoB;MAChCC,OAAQJ,KAAKG,EAAL,GAAUF,KAAKC,EAAf,GAAoB,CAArB,GAA0B,CAAC,CAA3B,GAA+B,CAA5C;MACMG,OAAO9B,KAAK+B,IAAL,CAAUN,KAAKA,EAAL,GAAUC,KAAKA,EAAzB,CAAb;MACMM,OAAOhC,KAAK+B,IAAL,CAAUN,KAAKA,EAAL,GAAUC,KAAKA,EAAzB,CAAb;MACMO,MAAMR,KAAKE,EAAL,GAAUD,KAAKE,EAA3B;;MAEIM,MAAMD,OAAOH,OAAOE,IAAd,CAAV;;MAEIE,MAAM,CAAV,EAAa;UACL,CAAN;;;MAGEA,MAAM,CAAC,CAAX,EAAc;UACN,CAAC,CAAP;;;SAGKL,OAAO7B,KAAKmC,IAAL,CAAUD,GAAV,CAAd;CAhBF;;AAmBA,IAAME,eAAe,SAAfA,YAAe,CACnBC,EADmB,EAEnBC,EAFmB,EAGnBC,EAHmB,EAInBC,EAJmB,EAKnBrC,EALmB,EAMnBC,EANmB,EAOnBqC,YAPmB,EAQnBC,SARmB,EASnBpC,MATmB,EAUnBD,MAVmB,EAWnBsC,GAXmB,EAYnBC,GAZmB,EAahB;MACGC,OAAO7C,KAAK8C,GAAL,CAAS3C,EAAT,EAAa,CAAb,CAAb;MACM4C,OAAO/C,KAAK8C,GAAL,CAAS1C,EAAT,EAAa,CAAb,CAAb;MACM4C,QAAQhD,KAAK8C,GAAL,CAASH,GAAT,EAAc,CAAd,CAAd;MACMM,QAAQjD,KAAK8C,GAAL,CAASF,GAAT,EAAc,CAAd,CAAd;;MAEIM,WAAYL,OAAOE,IAAR,GAAiBF,OAAOI,KAAxB,GAAkCF,OAAOC,KAAxD;;MAEIE,WAAW,CAAf,EAAkB;eACL,CAAX;;;cAGWL,OAAOI,KAAR,GAAkBF,OAAOC,KAArC;aACWhD,KAAK+B,IAAL,CAAUmB,QAAV,KAAuBT,iBAAiBC,SAAjB,GAA6B,CAAC,CAA9B,GAAkC,CAAzD,CAAX;;MAEMS,WAAWD,WAAW/C,EAAX,GAAgBC,EAAhB,GAAqBwC,GAAtC;MACMQ,WAAWF,WAAW,CAAC9C,EAAZ,GAAiBD,EAAjB,GAAsBwC,GAAvC;;MAEMpC,UAAUF,SAAS8C,QAAT,GAAoB7C,SAAS8C,QAA7B,GAAwC,CAACf,KAAKE,EAAN,IAAY,CAApE;MACM/B,UAAUF,SAAS6C,QAAT,GAAoB9C,SAAS+C,QAA7B,GAAwC,CAACd,KAAKE,EAAN,IAAY,CAApE;;MAEMa,MAAM,CAACV,MAAMQ,QAAP,IAAmBhD,EAA/B;MACMmD,MAAM,CAACV,MAAMQ,QAAP,IAAmBhD,EAA/B;MACMmD,MAAM,CAAC,CAACZ,GAAD,GAAOQ,QAAR,IAAoBhD,EAAhC;MACMqD,MAAM,CAAC,CAACZ,GAAD,GAAOQ,QAAR,IAAoBhD,EAAhC;;MAEIU,OAAOU,YAAY,CAAZ,EAAe,CAAf,EAAkB6B,GAAlB,EAAuBC,GAAvB,CAAX;MACIvC,OAAOS,YAAY6B,GAAZ,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,GAA3B,CAAX;;MAEId,cAAc,CAAd,IAAmB3B,OAAO,CAA9B,EAAiC;YACvBhB,GAAR;;;MAGE2C,cAAc,CAAd,IAAmB3B,OAAO,CAA9B,EAAiC;YACvBhB,GAAR;;;SAGK,CAAEQ,OAAF,EAAWC,OAAX,EAAoBM,IAApB,EAA0BC,IAA1B,CAAP;CAlDF;;AAqDA,IAAM0C,cAAc,SAAdA,WAAc,QAUd;MATJpB,EASI,SATJA,EASI;MARJC,EAQI,SARJA,EAQI;MAPJC,EAOI,SAPJA,EAOI;MANJC,EAMI,SANJA,EAMI;MALJrC,EAKI,SALJA,EAKI;MAJJC,EAII,SAJJA,EAII;kCAHJsD,aAGI;MAHJA,aAGI,uCAHY,CAGZ;iCAFJjB,YAEI;MAFJA,YAEI,sCAFW,CAEX;8BADJC,SACI;MADJA,SACI,mCADQ,CACR;;MACEiB,SAAS,EAAf;;MAEIxD,OAAO,CAAP,IAAYC,OAAO,CAAvB,EAA0B;WACjB,EAAP;;;MAGIE,SAASN,KAAKqB,GAAL,CAASqC,gBAAgB3D,GAAhB,GAAsB,GAA/B,CAAf;MACMM,SAASL,KAAKmB,GAAL,CAASuC,gBAAgB3D,GAAhB,GAAsB,GAA/B,CAAf;;MAEM4C,MAAMtC,UAAUgC,KAAKE,EAAf,IAAqB,CAArB,GAAyBjC,UAAUgC,KAAKE,EAAf,IAAqB,CAA1D;MACMI,MAAM,CAACtC,MAAD,IAAW+B,KAAKE,EAAhB,IAAsB,CAAtB,GAA0BlC,UAAUiC,KAAKE,EAAf,IAAqB,CAA3D;;MAEIG,QAAQ,CAAR,IAAaC,QAAQ,CAAzB,EAA4B;WACnB,EAAP;;;OAGG5C,KAAK4D,GAAL,CAASzD,EAAT,CAAL;OACKH,KAAK4D,GAAL,CAASxD,EAAT,CAAL;;MAEMyD,SACJ7D,KAAK8C,GAAL,CAASH,GAAT,EAAc,CAAd,IAAmB3C,KAAK8C,GAAL,CAAS3C,EAAT,EAAa,CAAb,CAAnB,GACAH,KAAK8C,GAAL,CAASF,GAAT,EAAc,CAAd,IAAmB5C,KAAK8C,GAAL,CAAS1C,EAAT,EAAa,CAAb,CAFrB;;MAIIyD,SAAS,CAAb,EAAgB;UACR7D,KAAK+B,IAAL,CAAU8B,MAAV,CAAN;UACM7D,KAAK+B,IAAL,CAAU8B,MAAV,CAAN;;;sBAGqCzB,aACrCC,EADqC,EAErCC,EAFqC,EAGrCC,EAHqC,EAIrCC,EAJqC,EAKrCrC,EALqC,EAMrCC,EANqC,EAOrCqC,YAPqC,EAQrCC,SARqC,EASrCpC,MATqC,EAUrCD,MAVqC,EAWrCsC,GAXqC,EAYrCC,GAZqC,CA7BnC;;MA6BErC,OA7BF;MA6BWC,OA7BX;MA6BoBM,IA7BpB;MA6B0BC,IA7B1B;;MA4CE+C,WAAW9D,KAAK+D,GAAL,CAAS/D,KAAKgE,IAAL,CAAUhE,KAAK4D,GAAL,CAAS7C,IAAT,KAAkBhB,MAAM,CAAxB,CAAV,CAAT,EAAgD,CAAhD,CAAjB;;UAEQ+D,QAAR;;OAEK,IAAIG,IAAI,CAAb,EAAgBA,IAAIH,QAApB,EAA8BG,GAA9B,EAAmC;WAC1BC,IAAP,CAAYrD,cAAcC,IAAd,EAAoBC,IAApB,CAAZ;YACQA,IAAR;;;SAGK4C,OAAOQ,GAAP,CAAW,iBAAS;wBACAjE,aAAakE,MAAO,CAAP,CAAb,EAAyBjE,EAAzB,EAA6BC,EAA7B,EAAiCC,MAAjC,EAAyCC,MAAzC,EAAiDC,OAAjD,EAA0DC,OAA1D,CADA;QACdU,EADc,iBACjBT,CADiB;QACPW,EADO,iBACVV,CADU;;yBAEAR,aAAakE,MAAO,CAAP,CAAb,EAAyBjE,EAAzB,EAA6BC,EAA7B,EAAiCC,MAAjC,EAAyCC,MAAzC,EAAiDC,OAAjD,EAA0DC,OAA1D,CAFA;QAEdc,EAFc,kBAEjBb,CAFiB;QAEPc,EAFO,kBAEVb,CAFU;;yBAGRR,aAAakE,MAAO,CAAP,CAAb,EAAyBjE,EAAzB,EAA6BC,EAA7B,EAAiCC,MAAjC,EAAyCC,MAAzC,EAAiDC,OAAjD,EAA0DC,OAA1D,CAHQ;QAGjBC,CAHiB,kBAGjBA,CAHiB;QAGdC,CAHc,kBAGdA,CAHc;;WAKlB,EAAEQ,MAAF,EAAME,MAAN,EAAUE,MAAV,EAAcC,MAAd,EAAkBd,IAAlB,EAAqBC,IAArB,EAAP;GALK,CAAP;CA/DF;;ACxHA,IAAM2D,iBAAiB,SAAjBA,cAAiB,CAACrD,CAAD,EAAIsD,CAAJ,EAAOC,CAAP,EAAa;MAC5BC,IAAIxE,KAAKmC,IAAL,CACR,CAACnC,KAAK8C,GAAL,CAAS9B,CAAT,EAAY,CAAZ,IAAiBhB,KAAK8C,GAAL,CAASwB,CAAT,EAAY,CAAZ,CAAjB,GAAkCtE,KAAK8C,GAAL,CAASyB,CAAT,EAAY,CAAZ,CAAnC,KACC,IAAIvD,CAAJ,GAAQsD,CADT,CADQ,CAAV;;SAKOE,KAAK,MAAMxE,KAAKC,EAAhB,CAAP;CANF;;AASA,IAAMwE,oBAAoB,SAApBA,iBAAoB,CAACC,CAAD,EAAIC,CAAJ,EAAmB;oCAATC,IAAS;QAAA;;;MACvCC,aAAaF,CAAb,CAAJ,EAAqB;WACZA,EAAER,GAAF,CAAM;aAASO,oBAAEI,KAAF,SAAYF,IAAZ,EAAT;KAAN,CAAP;;;SAGKF,oBAAEC,CAAF,SAAQC,IAAR,EAAP;CALF;;AAQA,IAAMG,gBAAgB,SAAhBA,aAAgB;SAAKF,aAAaF,CAAb,IAAkBA,CAAlB,GAAsB,CAAEA,CAAF,CAA3B;CAAtB;;AAEA,IAAME,eAAe,SAAfA,YAAe;SAAKG,MAAMC,OAAN,CAAcN,EAAG,CAAH,CAAd,CAAL;CAArB;;AAEA,IAAMO,mBAAmB,SAAnBA,gBAAmB,CAAClE,CAAD,EAAIsD,CAAJ,EAAOa,QAAP,EAAoB;MACrCZ,IAAIvD,MAAMsD,CAAN,GAAU,CAAV,GAActE,KAAK4D,GAAL,CAASU,IAAItD,CAAb,CAAxB;SACOuD,MAAM,CAAN,GAAUvD,CAAV,GAAeA,IAAIsD,CAAJ,GAAQtD,IAAIuD,IAAIY,QAAhB,GAA2BnE,IAAIuD,IAAIY,QAAzD;CAFF;;AClBA,IAAMC,cAAc,SAAdA,WAAc,QAAS;MACrBT,IAAI,EAAV;;OAEK,IAAIV,IAAI,CAAR,EAAWoB,IAAIP,MAAMQ,MAA1B,EAAkCrB,IAAIoB,CAAtC,EAAyCpB,GAAzC,EAA8C;QACtCsB,QAAQT,MAAOb,CAAP,CAAd;;QAEIsB,MAAMnB,KAAN,IAAemB,MAAMnB,KAAN,CAAYoB,IAAZ,KAAqB,OAAxC,EAAiD;mBACtBV,MAAOb,IAAI,CAAX,CADsB;UACpC5B,EADoC,UACvC5B,CADuC;UAC7B6B,EAD6B,UAChC5B,CADgC;UAEpC6B,EAFoC,GAEtBgD,KAFsB,CAEvC9E,CAFuC;UAE7B+B,EAF6B,GAEtB+C,KAFsB,CAEhC7E,CAFgC;;;UAI3C6E,MAAMnB,KAAN,CAAYoB,IAAZ,KAAqB,KAAzB,EAAgC;YACxB7B,SAASF,YAAY;gBAAA;gBAAA;gBAAA;gBAAA;cAKrB8B,MAAMnB,KAAN,CAAYjE,EALS;cAMrBoF,MAAMnB,KAAN,CAAYhE,EANS;yBAOVmF,MAAMnB,KAAN,CAAYV,aAPF;wBAQX6B,MAAMnB,KAAN,CAAY3B,YARD;qBASd8C,MAAMnB,KAAN,CAAY1B;SATV,CAAf;;eAYO+C,OAAP,CAAe,gBAA8B;cAA3BvE,EAA2B,QAA3BA,EAA2B;cAAvBE,EAAuB,QAAvBA,EAAuB;cAAnBE,EAAmB,QAAnBA,EAAmB;cAAfC,EAAe,QAAfA,EAAe;cAAXd,CAAW,QAAXA,CAAW;cAARC,CAAQ,QAARA,CAAQ;;YACzCwD,IAAF,CAAO,EAAEzD,IAAF,EAAKC,IAAL,EAAQ0D,OAAO,EAAEoB,MAAM,OAAR,EAAiBtE,MAAjB,EAAqBE,MAArB,EAAyBE,MAAzB,EAA6BC,MAA7B,EAAf,EAAP;SADF;OAbF,MAgBO,IAAIgE,MAAMnB,KAAN,CAAYoB,IAAZ,KAAqB,WAAzB,EAAsC;YACrCtE,KAAKmB,KAAM,IAAI,CAAJ,IAASkD,MAAMnB,KAAN,CAAYlD,EAAZ,GAAiBmB,EAA1B,CAAjB;YACMjB,KAAKkB,KAAM,IAAI,CAAJ,IAASiD,MAAMnB,KAAN,CAAYhD,EAAZ,GAAiBkB,EAA1B,CAAjB;YACMhB,KAAKiB,KAAM,IAAI,CAAJ,IAASgD,MAAMnB,KAAN,CAAYlD,EAAZ,GAAiBqB,EAA1B,CAAjB;YACMhB,KAAKiB,KAAM,IAAI,CAAJ,IAAS+C,MAAMnB,KAAN,CAAYhD,EAAZ,GAAiBoB,EAA1B,CAAjB;;UAEE0B,IAAF,CAAO,EAAEzD,GAAG8B,EAAL,EAAS7B,GAAG8B,EAAZ,EAAgB4B,OAAO,EAAEoB,MAAM,OAAR,EAAiBtE,MAAjB,EAAqBE,MAArB,EAAyBE,MAAzB,EAA6BC,MAA7B,EAAvB,EAAP;;KA1BJ,MA4BO;QACH2C,IAAF,CAAOqB,KAAP;;;;SAIGZ,CAAP;CAvCF;;AA0CA,IAAMe,SAAS,SAATA,MAAS;SAAKjB,kBAAkBW,WAAlB,EAA+BT,CAA/B,CAAL;CAAf;;AC1CA,IAAMgB,eAAe,SAAfA,YAAe,CAACC,IAAD,EAAOC,EAAP;SAAc,CACjC;OACKX,iBAAiBU,KAAKnF,CAAtB,EAAyBoF,GAAGpF,CAA5B,EAA+B,GAA/B,CADL;OAEKyE,iBAAiBU,KAAKlF,CAAtB,EAAyBmF,GAAGnF,CAA5B,EAA+B,GAA/B;GAH4B,EAKjCmF,EALiC,CAAd;CAArB;;AAQA,IAAMC,eAAe,SAAfA,YAAe,CAACF,IAAD,EAAOC,EAAP,EAAc;kBACNA,GAAGzB,KADG;MACzBlD,EADyB,aACzBA,EADyB;MACrBE,EADqB,aACrBA,EADqB;MACjBE,EADiB,aACjBA,EADiB;MACbC,EADa,aACbA,EADa;;;MAG3BwE,IAAI,EAAEtF,GAAGmF,KAAKnF,CAAV,EAAaC,GAAGkF,KAAKlF,CAArB,EAAV;MACMsF,IAAI,EAAEvF,GAAGS,EAAL,EAASR,GAAGU,EAAZ,EAAV;MACM6E,IAAI,EAAExF,GAAGa,EAAL,EAASZ,GAAGa,EAAZ,EAAV;MACM2E,IAAI,EAAEzF,GAAGoF,GAAGpF,CAAR,EAAWC,GAAGmF,GAAGnF,CAAjB,EAAV;MACMyF,IAAI,EAAE1F,GAAGyE,iBAAiBa,EAAEtF,CAAnB,EAAsBuF,EAAEvF,CAAxB,EAA2B,GAA3B,CAAL,EAAsCC,GAAGwE,iBAAiBa,EAAErF,CAAnB,EAAsBsF,EAAEtF,CAAxB,EAA2B,GAA3B,CAAzC,EAAV;MACM0F,IAAI,EAAE3F,GAAGyE,iBAAiBc,EAAEvF,CAAnB,EAAsBwF,EAAExF,CAAxB,EAA2B,GAA3B,CAAL,EAAsCC,GAAGwE,iBAAiBc,EAAEtF,CAAnB,EAAsBuF,EAAEvF,CAAxB,EAA2B,GAA3B,CAAzC,EAAV;MACM2F,IAAI,EAAE5F,GAAGyE,iBAAiBe,EAAExF,CAAnB,EAAsByF,EAAEzF,CAAxB,EAA2B,GAA3B,CAAL,EAAsCC,GAAGwE,iBAAiBe,EAAEvF,CAAnB,EAAsBwF,EAAExF,CAAxB,EAA2B,GAA3B,CAAzC,EAAV;MACM4F,IAAI,EAAE7F,GAAGyE,iBAAiBiB,EAAE1F,CAAnB,EAAsB2F,EAAE3F,CAAxB,EAA2B,GAA3B,CAAL,EAAsCC,GAAGwE,iBAAiBiB,EAAEzF,CAAnB,EAAsB0F,EAAE1F,CAAxB,EAA2B,GAA3B,CAAzC,EAAV;MACM6F,IAAI,EAAE9F,GAAGyE,iBAAiBkB,EAAE3F,CAAnB,EAAsB4F,EAAE5F,CAAxB,EAA2B,GAA3B,CAAL,EAAsCC,GAAGwE,iBAAiBkB,EAAE1F,CAAnB,EAAsB2F,EAAE3F,CAAxB,EAA2B,GAA3B,CAAzC,EAAV;MACM8F,IAAI,EAAE/F,GAAGyE,iBAAiBoB,EAAE7F,CAAnB,EAAsB8F,EAAE9F,CAAxB,EAA2B,GAA3B,CAAL,EAAsCC,GAAGwE,iBAAiBoB,EAAE5F,CAAnB,EAAsB6F,EAAE7F,CAAxB,EAA2B,GAA3B,CAAzC,EAAV;;SAEO,CACL,EAAED,GAAG+F,EAAE/F,CAAP,EAAUC,GAAG8F,EAAE9F,CAAf,EAAkB0D,OAAO,EAAEoB,MAAM,OAAR,EAAiBtE,IAAIiF,EAAE1F,CAAvB,EAA0BW,IAAI+E,EAAEzF,CAAhC,EAAmCY,IAAIgF,EAAE7F,CAAzC,EAA4Cc,IAAI+E,EAAE5F,CAAlD,EAAzB,EADK,EAEL,EAAED,GAAGyF,EAAEzF,CAAP,EAAUC,GAAGwF,EAAExF,CAAf,EAAkB0D,OAAO,EAAEoB,MAAM,OAAR,EAAiBtE,IAAIqF,EAAE9F,CAAvB,EAA0BW,IAAImF,EAAE7F,CAAhC,EAAmCY,IAAI+E,EAAE5F,CAAzC,EAA4Cc,IAAI8E,EAAE3F,CAAlD,EAAzB,EAFK,CAAP;CAdF;;AAoBA,IAAM+F,SAAS,SAATA,MAAS,CAACb,IAAD,EAAOC,EAAP;SAAcA,GAAGzB,KAAH,GACzB0B,aAAaF,IAAb,EAAmBC,EAAnB,CADyB,GAEzBF,aAAaC,IAAb,EAAmBC,EAAnB,CAFW;CAAf;;AAIA,IAAMa,YAAY,SAAZA,SAAY,CAAC5B,KAAD,EAAQ6B,cAAR,EAA2B;MACvCC,MAAMD,cAAN,CAAJ,EAA2B;UACnBE,MAAM,+DAAN,CAAN;;;MAGIC,wCAAiBhC,KAAjB,EAAN;;OAEK,IAAIb,IAAI,CAAb,EAAgBA,IAAI6C,UAAUxB,MAA9B,GAAuC;QACjCwB,UAAUxB,MAAV,IAAoBqB,cAAxB,EAAwC;aAC/BG,SAAP;;;QAGIjB,KAAKiB,UAAW7C,CAAX,CAAX;;QAEI4B,GAAGkB,MAAP,EAAe;;KAAf,MAEO;UACCnB,OAAOkB,UAAW7C,IAAI,CAAf,CAAb;;oBACuCwC,OAAOb,IAAP,EAAaC,EAAb,CAFlC;;UAEGmB,QAFH;UAEaC,gBAFb;;gBAIKC,MAAV,CAAiBjD,CAAjB,EAAoB,CAApB,EAAuB+C,QAAvB,EAAiCC,gBAAjC;;WAEK,CAAL;;;;SAIGP,UAAUI,SAAV,EAAqBH,cAArB,CAAP;CA1BF;;AA6BA,IAAMQ,MAAM,SAANA,GAAM,CAACrC,KAAD,EAAQ6B,cAAR;SAA2BD,UAAUhB,OAAOZ,KAAP,CAAV,EAAyB6B,cAAzB,CAA3B;CAAZ;;AC9DA,IAAMrB,SAAS,SAATA,MAAS,CAACR,KAAD,EAAQsC,QAAR,EAAqB;MAC5BzC,IAAI0C,QAAQvC,KAAR,EAAesC,QAAf,CAAV;;SAEOzC,EAAE2C,MAAF,CAAS,UAACC,aAAD,QAA0CtD,CAA1C,EAAgD;QAA3B3C,EAA2B,QAA9Bb,CAA8B;QAApBc,EAAoB,QAAvBb,CAAuB;QAAhBqG,MAAgB,QAAhBA,MAAgB;;QAC1D,CAACA,MAAL,EAAa;eACcpC,EAAGV,IAAI,CAAP,CADd;UACA/C,EADA,MACHT,CADG;UACOW,EADP,MACIV,CADJ;;uBAEM8G,aAAatG,EAAb,EAAiBE,EAAjB,EAAqBE,EAArB,EAAyBC,EAAzB,CAAjB;;;WAGKgG,aAAP;GANK,EAOJ,CAPI,CAAP;CAHF;;AAaA,IAAMC,eAAe,SAAfA,YAAe,CAACtG,EAAD,EAAKE,EAAL,EAASE,EAAT,EAAaC,EAAb;SAAoBvB,KAAK+B,IAAL,CACvC/B,KAAK8C,GAAL,CAAS5B,KAAKI,EAAd,EAAkB,CAAlB,IAAuBtB,KAAK8C,GAAL,CAAS1B,KAAKG,EAAd,EAAkB,CAAlB,CADgB,CAApB;CAArB;;ACVA,IAAMkG,QAAQ,SAARA,KAAQ,WAAY;iCACLC,SAAU,CAAV,CADK;MAChBC,EADgB;MACZC,EADY;;kCAELF,SAAU,CAAV,CAFK;MAEhBG,EAFgB;MAEZC,EAFY;;kCAGLJ,SAAU,CAAV,CAHK;MAGhBnF,EAHgB;MAGZC,EAHY;;MAKlBxB,IAAIwG,aAAaG,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,CAAV;MACMxD,IAAIkD,aAAaK,EAAb,EAAiBC,EAAjB,EAAqBvF,EAArB,EAAyBC,EAAzB,CAAV;MACM+B,IAAIiD,aAAajF,EAAb,EAAiBC,EAAjB,EAAqBmF,EAArB,EAAyBC,EAAzB,CAAV;;SAEOvD,eAAerD,CAAf,EAAkBsD,CAAlB,EAAqBC,CAArB,CAAP;CATF;;AAYA,IAAMwD,SAAS,SAATA,MAAS;SAASjD,MAAMwC,MAAN,CAAa,UAAC/C,CAAD;QAAMH,KAAN,QAAMA,KAAN;WAAkBA,QAAQ,IAAR,GAAeG,CAAjC;GAAb,EAAiD,KAAjD,CAAT;CAAf;;AAEA,IAAM8C,UAAU,SAAVA,OAAU,CAACvC,KAAD,EAAyB;MAAjBsC,QAAiB,uEAAN,CAAM;;MACnC,CAACW,OAAOjD,KAAP,CAAL,EAAoB;WACXA,KAAP;;;MAGIH,IAAIe,OAAOZ,KAAP,CAAV;MACMkD,IAAI,EAAV;;IAEE7D,GAAF,CAAM,UAACoB,KAAD,EAAQtB,CAAR,EAAc;QACdsB,MAAMnB,KAAV,EAAiB;UACT6D,YAAYtD,EAAGV,IAAI,CAAP,CAAlB;iBACWgE,SAAX,EAAsB1C,KAAtB,EAA6B6B,QAA7B,EACGjD,GADH,CACO;eAAK6D,EAAE9D,IAAF,CAAOgE,CAAP,CAAL;OADP;KAFF,MAIO;QACHhE,IAAF,CAAOqB,KAAP;;GANJ;;SAUOyC,CAAP;CAlBF;;AAqBA,IAAMG,WAAW,SAAXA,QAAW,CAACjH,EAAD,EAAKE,EAAL,EAASgH,GAAT,EAAcC,GAAd,EAAmB/G,EAAnB,EAAuBC,EAAvB,EAA2B+G,GAA3B,EAAgCC,GAAhC,EAAqCnB,QAArC,EAAkD;MAC3DoB,KAAK,CAAC,CAAEJ,GAAF,EAAOC,GAAP,CAAD,EAAe,CAAE/G,EAAF,EAAMC,EAAN,CAAf,EAA2B,CAAEL,EAAF,EAAME,EAAN,CAA3B,CAAX;MACMqH,KAAK,CAAC,CAAEH,GAAF,EAAOC,GAAP,CAAD,EAAe,CAAErH,EAAF,EAAME,EAAN,CAAf,EAA2B,CAAEE,EAAF,EAAMC,EAAN,CAA3B,CAAX;SACOkG,MAAMe,EAAN,IAAYpB,QAAZ,IAAwBK,MAAMgB,EAAN,IAAYrB,QAA3C;CAHF;;AAMA,IAAMsB,aAAa,SAAbA,UAAa,CAACT,SAAD,EAAY1C,KAAZ,EAAmB6B,QAAnB,EAAgC;MACtClG,EADsC,GACxB+G,SADwB,CACzCxH,CADyC;MAC/BW,EAD+B,GACxB6G,SADwB,CAClCvH,CADkC;MAEtCY,EAFsC,GAEjBiE,KAFiB,CAEzC9E,CAFyC;MAE/Bc,EAF+B,GAEjBgE,KAFiB,CAElC7E,CAFkC;MAE3B0D,KAF2B,GAEjBmB,KAFiB,CAE3BnB,KAF2B;MAGrCgE,GAHqC,GAGFhE,KAHE,CAGzClD,EAHyC;MAG5BmH,GAH4B,GAGFjE,KAHE,CAGhChD,EAHgC;MAGnBkH,GAHmB,GAGFlE,KAHE,CAGvB9C,EAHuB;MAGViH,GAHU,GAGFnE,KAHE,CAGd7C,EAHc;;;MAK7C4G,SAASjH,EAAT,EAAaE,EAAb,EAAiBgH,GAAjB,EAAsBC,GAAtB,EAA2B/G,EAA3B,EAA+BC,EAA/B,EAAmC+G,GAAnC,EAAwCC,GAAxC,EAA6CnB,QAA7C,CAAJ,EAA4D;WACnD,CAAE7B,KAAF,CAAP;;;sBAG8BO,aAAamC,SAAb,EAAwB1C,KAAxB,CATiB;;MASzCyB,QATyC;MAS/B2B,SAT+B;;qCAY5CD,WAAWT,SAAX,EAAsBjB,QAAtB,EAAgCI,QAAhC,CADL,qBAEKsB,WAAW1B,QAAX,EAAqB2B,SAArB,EAAgCvB,QAAhC,CAFL;CAXF;;AC3CA,IAAMwB,cAAc,SAAdA,WAAc,IAAK;MACnBC,eAAJ;MACIC,aAAJ;MACIC,cAAJ;MACIC,YAAJ;;MAEMC,SAASlE,cAAcJ,CAAd,CAAf;;SAEOR,GAAP,CAAW;WAASkD,QAAQvC,KAAR,EAAeX,GAAf,CAAmB,gBAAc;UAAX1D,CAAW,QAAXA,CAAW;UAARC,CAAQ,QAARA,CAAQ;;UAC/C,OAAOmI,MAAP,KAAkB,QAAlB,IAA8BnI,IAAImI,MAAtC,EAA8C;iBACnCnI,CAAT;;;UAGE,OAAOoI,IAAP,KAAgB,QAAhB,IAA4BrI,IAAIqI,IAApC,EAA0C;eACjCrI,CAAP;;;UAGE,OAAOsI,KAAP,KAAiB,QAAjB,IAA6BtI,IAAIsI,KAArC,EAA4C;gBAClCtI,CAAR;;;UAGE,OAAOuI,GAAP,KAAe,QAAf,IAA2BtI,IAAIsI,GAAnC,EAAwC;cAChCtI,CAAN;;KAdgB,CAAT;GAAX;;SAkBO;kBAAA;YAEG;SACHoI,OAAQ,CAACC,QAAQD,IAAT,IAAiB,CADtB;SAEHE,MAAO,CAACH,SAASG,GAAV,IAAiB;KAJxB;cAAA;gBAAA;;GAAP;CA1BF;;ACHA,IAAME,kBAAkB,SAAlBA,eAAkB;SAASC,MAAM7B,MAAN,CAAa,UAAC8B,KAAD,EAAQ3C,MAAR;WAC5C2C,QAAQC,YAAY5C,MAAZ,CADoC;GAAb,EAE9B,CAF8B,CAAT;CAAxB;;AAIA,IAAM4C,cAAc,SAAdA,WAAc;SAAU5C,OAAOnB,MAAP,IAAiBgE,SAAS7C,MAAT,IAAmB,CAAnB,GAAuB,CAAxC,CAAV;CAApB;;AAEA,IAAM6C,WAAW,SAAXA,QAAW,SAAU;MACnBC,aAAa9C,OAAQ,CAAR,CAAnB;MACMkC,YAAYlC,OAAQA,OAAOnB,MAAP,GAAgB,CAAxB,CAAlB;SACOiE,WAAW9I,CAAX,KAAiBkI,UAAUlI,CAA3B,IAAgC8I,WAAW7I,CAAX,KAAiBiI,UAAUjI,CAAlE;CAHF;;AAMA,IAAM8I,YAAY,SAAZA,SAAY;SAASL,MAAM7B,MAAN,CAAa,UAACxC,KAAD,EAAQ2E,IAAR;uCACjC3E,KADiC,qBACvB2E,IADuB;GAAb,EAExB,EAFwB,CAAT;CAAlB;;AAIA,IAAMC,YAAY,SAAZA,SAAY,CAAC5E,KAAD,EAAQ6E,MAAR,EAAmB;MAC7BR,QAAQS,WAAW9E,KAAX,CAAd;MACMsE,QAAQF,gBAAgBC,KAAhB,CAAd;MACMU,mBAAmB,CAAEF,SAASP,KAAV,GAAmBA,KAApB,IAA6BA,KAAtD;;MAEI,CAACS,gBAAL,EAAuB;WACd/E,KAAP;;;mBAGgCgF,UAAUX,KAAV,EAAiBU,gBAAjB,CATC;MAS3BE,SAT2B,cAS3BA,SAT2B;MAShBC,UATgB,cAShBA,UATgB;;MAU7BC,iBAAiBC,aAAaf,KAAb,EAAoBY,SAApB,CAAvB;MACMI,YAAYC,cAAcH,eAAgB,CAAhB,CAAd,EAAmCD,UAAnC,CAAlB;MACMK,cAAc,4BAAKJ,cAAL,GAAsB/C,MAAtB,CAA6B,CAA7B,CAApB;;SAEOsC,WAAYW,SAAZ,2BAA0BE,WAA1B,GAAP;CAdF;;AAiBA,IAAMP,YAAY,SAAZA,SAAY,CAACX,KAAD,EAAQQ,MAAR,EAAmB;OAC9B,IAAI1F,IAAI,CAAR,EAAWoB,IAAI8D,MAAM7D,MAA1B,EAAkCrB,IAAIoB,CAAtC,EAAyCpB,GAAzC,EAA8C;QACtCmF,QAAQC,YAAYF,MAAOlF,CAAP,CAAZ,CAAd;;QAEI0F,UAAUP,QAAQ,CAAtB,EAAyB;aAChB;mBACMnF,CADN;oBAEO0F;OAFd;;;cAMQP,KAAV;;CAXJ;;AAeA,IAAMc,eAAe,SAAfA,YAAe,CAACf,KAAD,EAAQQ,MAAR;SAAmB,4BAAKR,KAAL,GACrCjC,MADqC,CAC9ByC,MAD8B,EAErCW,MAFqC,CAE9B,4BAAKnB,KAAL,GAAajC,MAAb,CAAoB,CAApB,EAAuByC,MAAvB,CAF8B,CAAnB;CAArB;;AAIA,IAAMS,gBAAgB,SAAhBA,aAAgB,CAAC3D,MAAD,EAASkD,MAAT,EAAoB;MACpC,CAACA,MAAL,EAAa;WACJlD,MAAP;;;MAGI8D,cACJ,EAAE9J,GAAGgG,OAAQkD,MAAR,EAAiBlJ,CAAtB,EAAyBC,GAAG+F,OAAQkD,MAAR,EAAiBjJ,CAA7C,EAAgDqG,QAAQ,IAAxD,EADI,2BAED,4BAAKN,MAAL,GAAcS,MAAd,CAAqByC,SAAS,CAA9B,CAFC,EAAN;;MAKIL,SAAS7C,MAAT,CAAJ,EAAsB;uCAEf8D,UADL,qBAEK,4BAAK9D,MAAL,GAAcS,MAAd,CAAqB,CAArB,EAAwByC,MAAxB,CAFL;;;qCAOGY,UADL,qBAEK,4BAAK9D,MAAL,GAAcS,MAAd,CAAqB,CAArB,EAAwByC,SAAS,CAAjC,CAFL;CAjBF;;AAuBA,IAAMC,aAAa,SAAbA,UAAa;SAAS9E,MAAMwC,MAAN,CAAa,UAAC6B,KAAD,EAAQ5D,KAAR,EAAkB;QACrDA,MAAMwB,MAAV,EAAkB;YACV7C,IAAN,CAAW,EAAX;;;UAGKiF,MAAM7D,MAAN,GAAe,CAAtB,EAA0BpB,IAA1B,CAA+BqB,KAA/B;;WAEO4D,KAAP;GAP0B,EAQzB,EARyB,CAAT;CAAnB;;ACzEA,IAAMqB,eAAe,SAAfA,YAAe,CAAC1F,KAAD,EAAQrE,CAAR,EAAWC,CAAX;SAAiBoE,MAAMX,GAAN,CAAU,iBAAS;QACjD+D,iBAAS3C,KAAT,CAAN;;MAEE9E,CAAF,IAAOA,CAAP;MACEC,CAAF,IAAOA,CAAP;;QAEIwH,EAAE9D,KAAN,EAAa;QACTA,KAAF,gBAAe8D,EAAE9D,KAAjB;;UAEI8D,EAAE9D,KAAF,CAAQoB,IAAR,KAAiB,WAAjB,IAAgC0C,EAAE9D,KAAF,CAAQoB,IAAR,KAAiB,OAArD,EAA8D;UAC1DpB,KAAF,CAAQlD,EAAR,IAAcT,CAAd;UACE2D,KAAF,CAAQhD,EAAR,IAAcV,CAAd;;;UAGEwH,EAAE9D,KAAF,CAAQoB,IAAR,KAAiB,OAArB,EAA8B;UAC1BpB,KAAF,CAAQ9C,EAAR,IAAcb,CAAd;UACE2D,KAAF,CAAQ7C,EAAR,IAAcb,CAAd;;;;WAIGwH,CAAP;GApBoC,CAAjB;CAArB;;AAuBA,IAAMyB,SAAS,SAATA,MAAS,CAAChF,CAAD;MAAIlE,CAAJ,uEAAQ,CAAR;MAAWC,CAAX,uEAAe,CAAf;SAAqB+D,kBAAkB+F,YAAlB,EAAgC7F,CAAhC,EAAmClE,CAAnC,EAAsCC,CAAtC,CAArB;CAAf;;ACrBA,IAAM+G,UAAQ,SAARA,KAAQ,CAACvG,EAAD,EAAKE,EAAL,EAASE,EAAT,EAAaC,EAAb,EAAiBP,CAAjB,EAAuB;MAC/BE,OAAOI,EAAX,EAAe;WACNF,MAAMG,EAAN,GAAW,CAAX,GAAe,GAAtB;;;MAGI+C,IAAI,GAAV;MACMC,IAAIiD,aAAalG,EAAb,EAAiBC,EAAjB,EAAqBL,EAArB,EAAyBE,KAAKkD,CAA9B,CAAV;MACMmG,MAAMpG,eAAerD,CAAf,EAAkBsD,CAAlB,EAAqBC,CAArB,CAAZ;;SAEOrD,KAAKI,EAAL,GAAUmJ,GAAV,GAAgB,MAAMA,GAA7B;CATF;;AAYA,IAAMC,OAAO,SAAPA,IAAO,CAAC5F,KAAD,EAAQQ,SAAR,EAAgBqF,WAAhB,EAA6BC,aAA7B,EAA+C;eACjC9F,MAAOQ,YAAS,CAAhB,CADiC;MAC/CpE,EAD+C,UAClDT,CADkD;MACxCW,EADwC,UAC3CV,CAD2C;gBAEjCoE,MAAOQ,YAAS,CAAhB,CAFiC;MAE/ChE,EAF+C,WAElDb,CAFkD;MAExCc,EAFwC,WAE3Cb,CAF2C;;MAGpDmK,gBAAgBrD,aAAatG,EAAb,EAAiBE,EAAjB,EAAqBE,EAArB,EAAyBC,EAAzB,CAAtB;MACMuJ,kBAAkB,CAACF,gBAAgBD,WAAjB,IAAgCE,aAAhC,GAAgD,CAAxE;SACO,EAAE3J,MAAF,EAAME,MAAN,EAAUE,MAAV,EAAcC,MAAd,EAAkBuJ,gCAAlB,EAAmCD,4BAAnC,EAAP;CALF;;AAQA,IAAME,WAAW,SAAXA,QAAW,CAACjG,KAAD,EAAQK,QAAR,EAAkBiC,QAAlB,EAA+B;MACxCzC,IAAI0C,QAAQvC,KAAR,EAAesC,QAAf,CAAV;MACM/B,IAAIV,EAAEW,MAAZ;MACM0F,IAAI1F,OAAOX,CAAP,CAAV;MACMqD,IAAIgD,IAAI7F,QAAd;;aAGEA,WAAW,CAAX,GAAeuF,KAAK/F,CAAL,EAAQU,CAAR,EAAW2F,CAAX,EAAchD,CAAd,CAAf,GACK7C,WAAW,CAAX,GAAe8F,MAAMtG,CAAN,EAASqD,CAAT,CAAf,GAA6BkD,OAAOvG,CAAP,EAAUU,CAAV,EAAa2C,CAAb,CARU;MAMtC9G,EANsC,QAMtCA,EANsC;MAMlCE,EANkC,QAMlCA,EANkC;MAM9BE,EAN8B,QAM9BA,EAN8B;MAM1BC,EAN0B,QAM1BA,EAN0B;MAMtBuJ,eANsB,QAMtBA,eANsB;MAMLD,aANK,QAMLA,aANK;;SAUvC;WACEpD,QAAMvG,EAAN,EAAUE,EAAV,EAAcE,EAAd,EAAkBC,EAAlB,EAAsBsJ,aAAtB,CADF;OAEF3F,iBAAiBhE,EAAjB,EAAqBI,EAArB,EAAyBwJ,eAAzB,CAFE;OAGF5F,iBAAiB9D,EAAjB,EAAqBG,EAArB,EAAyBuJ,eAAzB;GAHL;CAVF;;AAiBA,IAAMG,QAAQ,SAARA,KAAQ,CAACnG,KAAD,EAAQ8F,aAAR,EAA0B;gBACb9F,MAAO,CAAP,CADa;MAC3B5D,EAD2B,WAC9BT,CAD8B;MACpBW,EADoB,WACvBV,CADuB;iBAEboE,MAAO,CAAP,CAFa;MAE3BxD,EAF2B,YAE9Bb,CAF8B;MAEpBc,EAFoB,YAEvBb,CAFuB;;MAGhCmK,gBAAgBrD,aAAatG,EAAb,EAAiBE,EAAjB,EAAqBE,EAArB,EAAyBC,EAAzB,CAAtB;MACMuJ,kBAAkBF,gBAAgBC,aAAxC;SACO,EAAE3J,MAAF,EAAME,MAAN,EAAUE,MAAV,EAAcC,MAAd,EAAkBuJ,gCAAlB,EAAmCD,4BAAnC,EAAP;CALF;;AAQA,IAAMK,SAAS,SAATA,MAAS,CAACpG,KAAD,EAAQQ,SAAR,EAAgBsF,aAAhB,EAAkC;MAC3CrD,gBAAgB,CAApB;;OAEK,IAAItD,IAAI,CAAb,EAAgBA,IAAIqB,SAApB,EAA4BrB,GAA5B,EAAiC;QACvB8C,MADuB,GACZjC,MAAOb,CAAP,CADY,CACvB8C,MADuB;;;QAG3B,CAACA,MAAL,EAAa;oBACcjC,MAAOb,IAAI,CAAX,CADd;UACA/C,EADA,WACHT,CADG;UACOW,EADP,WACIV,CADJ;qBAEcoE,MAAOb,CAAP,CAFd;UAEA3C,EAFA,YAEHb,CAFG;UAEOc,EAFP,YAEIb,CAFJ;;;UAILmK,gBAAgBrD,aAAatG,EAAb,EAAiBE,EAAjB,EAAqBE,EAArB,EAAyBC,EAAzB,CAAtB;;UAEIgG,gBAAgBsD,aAAhB,IAAiCD,aAArC,EAAoD;YAC5CE,kBAAkB,CAACF,gBAAgBrD,aAAjB,IAAkCsD,aAA1D;eACO,EAAE3J,MAAF,EAAME,MAAN,EAAUE,MAAV,EAAcC,MAAd,EAAkBuJ,gCAAlB,EAAmCD,4BAAnC,EAAP;;;uBAGeA,aAAjB;;;CAjBN;;AC/CA,IAAMM,YAAY,SAAZA,SAAY,CAACnK,CAAD,EAAIsD,CAAJ,EAAOC,CAAP,EAAa;MACzBD,EAAEF,KAAF,IAAWG,EAAEH,KAAjB,EAAwB;WACf,KAAP;;;MAGIgH,eACJ,CAAC7G,EAAE7D,CAAF,GAAMM,EAAEN,CAAT,KACC4D,EAAE7D,CAAF,GAAMO,EAAEP,CADT,IAEA,CAAC8D,EAAE9D,CAAF,GAAMO,EAAEP,CAAT,KACC6D,EAAE5D,CAAF,GAAMM,EAAEN,CADT,CAHF;;MAMIV,KAAK4D,GAAL,CAASwH,YAAT,IAAyBC,OAAOC,OAApC,EAA6C;WACpC,KAAP;;;MAGIC,aACJ,CAAChH,EAAE9D,CAAF,GAAMO,EAAEP,CAAT,KACC6D,EAAE7D,CAAF,GAAMO,EAAEP,CADT,IAEA,CAAC8D,EAAE7D,CAAF,GAAMM,EAAEN,CAAT,KACC4D,EAAE5D,CAAF,GAAMM,EAAEN,CADT,CAHF;;MAMI6K,aAAa,CAAjB,EAAoB;WACX,KAAP;;;MAGIC,kBACJ,CAAClH,EAAE7D,CAAF,GAAMO,EAAEP,CAAT,KACC6D,EAAE7D,CAAF,GAAMO,EAAEP,CADT,IAEA,CAAC6D,EAAE5D,CAAF,GAAMM,EAAEN,CAAT,KACC4D,EAAE5D,CAAF,GAAMM,EAAEN,CADT,CAHF;;MAMI6K,aAAaC,eAAjB,EAAkC;WACzB,KAAP;;;SAGK,IAAP;CAnCF;;AAsCA,IAAMC,eAAe,SAAfA,YAAe,QAAS;MACtB9G,IAAI,EAAV;;OAEK,IAAIV,IAAI,CAAR,EAAWoB,IAAIP,MAAMQ,MAA1B,EAAkCrB,IAAIoB,CAAtC,EAAyCpB,GAAzC,EAA8C;QACtCjD,IAAI2D,EAAGA,EAAEW,MAAF,GAAW,CAAd,CAAV;QACMhB,IAAIQ,MAAOb,IAAI,CAAX,CAAV;QACMM,IAAIO,MAAOb,CAAP,CAAV;;QAEI,EAAEjD,KAAKsD,CAAL,IAAUC,CAAZ,KAAkB,CAAE4G,UAAUnK,CAAV,EAAasD,CAAb,EAAgBC,CAAhB,CAAxB,EAA6C;QACzCL,IAAF,CAAOK,CAAP;;;;SAIGI,CAAP;CAbF;;AAgBA,IAAM+G,SAAS,SAATA,MAAS;SAAKjH,kBAAkBgH,YAAlB,EAAgC9G,CAAhC,CAAL;CAAf;;ACrDA,IAAMgH,gBAAgB,SAAhBA,aAAgB,QAAS;MACzBC,UAAJ;MACIrH,UAAJ;;SAEOO,MAAM+G,OAAN,GAAgB1H,GAAhB,CAAoB,gBAA0BF,CAA1B,EAAgC;QAA7BxD,CAA6B,QAA7BA,CAA6B;QAA1BC,CAA0B,QAA1BA,CAA0B;QAAvBqG,MAAuB,QAAvBA,MAAuB;QAAf3C,KAAe,QAAfA,KAAe;;QACnDmB,QAAQ,EAAE9E,IAAF,EAAKC,IAAL,EAAd;;QAEI6D,CAAJ,EAAO;eACsCA,CADtC;UACOjD,EADP,MACGJ,EADH;UACeK,EADf,MACWH,EADX;UACuBF,EADvB,MACmBI,EADnB;UAC+BF,EAD/B,MAC2BG,EAD3B;;YAEC6C,KAAN,GAAc,EAAEoB,MAAM,OAAR,EAAiBtE,MAAjB,EAAqBE,MAArB,EAAyBE,MAAzB,EAA6BC,MAA7B,EAAd;;;QAGE0C,MAAM,CAAN,IAAW2H,CAAf,EAAkB;YACV7E,MAAN,GAAe,IAAf;;;QAGEA,MAAJ;QACI3C,SAAS,IAAb;;WAEOmB,KAAP;GAfK,CAAP;CAJF;;AAuBA,IAAMsG,UAAU,SAAVA,OAAU;SAAKpH,kBAAkBkH,aAAlB,EAAiCjG,OAAOf,CAAP,CAAjC,CAAL;CAAhB;;ACvBA,IAAMmH,cAAc,SAAdA,WAAc,CAACrL,CAAD,EAAIC,CAAJ,EAAO6D,CAAP,EAAUI,CAAV,EAAaoH,KAAb,EAAuB;MAC9BC,OAD8B,GACND,KADM,CACjCtL,CADiC;MAClBwL,OADkB,GACNF,KADM,CACrBrL,CADqB;;MAEnCwL,YAAYzL,IAAIuL,OAAtB;MACMG,YAAYzL,IAAIuL,OAAtB;;SAEO,CACJC,YAAY3H,CAAZ,GAAgB4H,YAAYxH,CAA7B,GAAkCqH,OAD7B,EAEJE,YAAYvH,CAAZ,GAAgBwH,YAAY5H,CAA7B,GAAkC0H,OAF7B,CAAP;CALF;;AAWA,IAAMG,eAAe,SAAfA,YAAe,CAACtH,KAAD,EAAQ2C,KAAR,EAAesE,KAAf;SAAyBjH,MAAMX,GAAN,CAAU,iBAAS;QACzDK,IAAIiD,QAAQzH,KAAKC,EAAb,GAAkB,GAA5B;QACMsE,IAAIvE,KAAKmB,GAAL,CAASqD,CAAT,CAAV;QACMG,IAAI3E,KAAKqB,GAAL,CAASmD,CAAT,CAAV;;uBACiBsH,YAAYvG,MAAM9E,CAAlB,EAAqB8E,MAAM7E,CAA3B,EAA8B6D,CAA9B,EAAiCI,CAAjC,EAAoCoH,KAApC,CAJ8C;;QAIvDtL,CAJuD;QAIpDC,CAJoD;;QAKzDwH,iBAAS3C,KAAT,IAAgB9E,IAAhB,EAAmBC,IAAnB,GAAN;;QAEIwH,EAAE9D,KAAN,EAAa;UACP8D,EAAE9D,KAAF,CAAQoB,IAAR,KAAiB,WAAjB,IAAgC0C,EAAE9D,KAAF,CAAQoB,IAAR,KAAiB,OAArD,EAA8D;4BACzCsG,YAAY5D,EAAE9D,KAAF,CAAQlD,EAApB,EAAwBgH,EAAE9D,KAAF,CAAQhD,EAAhC,EAAoCmD,CAApC,EAAuCI,CAAvC,EAA0CoH,KAA1C,CADyC;;YACpD7K,EADoD;YAChDE,EADgD;;UAE1DgD,KAAF,gBAAe8D,EAAE9D,KAAjB,IAAwBlD,MAAxB,EAA4BE,MAA5B;;;UAGE8G,EAAE9D,KAAF,CAAQoB,IAAR,KAAiB,OAArB,EAA8B;4BACTsG,YAAY5D,EAAE9D,KAAF,CAAQ9C,EAApB,EAAwB4G,EAAE9D,KAAF,CAAQ7C,EAAhC,EAAoCgD,CAApC,EAAuCI,CAAvC,EAA0CoH,KAA1C,CADS;;YACpBzK,EADoB;YAChBC,EADgB;;UAE1B6C,KAAF,gBAAe8D,EAAE9D,KAAjB,IAAwB9C,MAAxB,EAA4BC,MAA5B;;;;WAIG2G,CAAP;GAnB4C,CAAzB;CAArB;;AAsBA,IAAMmE,SAAS,SAATA,MAAS,CAAC1H,CAAD,EAAI8C,KAAJ,EAAc;qBACDmB,YAAYjE,CAAZ,CADC;MACXoH,KADW,gBACnBO,MADmB;;SAEpB7H,kBAAkB2H,YAAlB,EAAgCzH,CAAhC,EAAmC8C,KAAnC,EAA0CsE,KAA1C,CAAP;CAFF;;ACjCA,IAAMQ,aAAa,SAAbA,UAAa,CAAChH,KAAD,EAAQiH,WAAR,EAAqBC,OAArB,EAA8BC,OAA9B,EAA0C;MACrDxE,iBAAS3C,KAAT,CAAN;;IAEE9E,CAAF,GAAMgM,UAAW,CAACA,UAAUvE,EAAEzH,CAAb,IAAkB+L,WAAnC;IACE9L,CAAF,GAAMgM,UAAW,CAACA,UAAUxE,EAAExH,CAAb,IAAkB8L,WAAnC;;MAEIjH,MAAMnB,KAAV,EAAiB;MACbA,KAAF,gBAAe8D,EAAE9D,KAAjB;;QAEI8D,EAAE9D,KAAF,CAAQoB,IAAR,KAAiB,KAArB,EAA4B;UACtB0C,EAAE9D,KAAF,CAAQjE,EAAZ,EAAgB;UACZiE,KAAF,CAAQjE,EAAR,GAAa+H,EAAE9D,KAAF,CAAQjE,EAAR,GAAaqM,WAA1B;;;UAGEtE,EAAE9D,KAAF,CAAQhE,EAAZ,EAAgB;UACZgE,KAAF,CAAQhE,EAAR,GAAa8H,EAAE9D,KAAF,CAAQhE,EAAR,GAAaoM,WAA1B;;KANJ,MAQO;QACHpI,KAAF,CAAQlD,EAAR,GAAauL,UAAW,CAACA,UAAUvE,EAAE9D,KAAF,CAAQlD,EAAnB,IAAyBsL,WAAjD;QACEpI,KAAF,CAAQhD,EAAR,GAAasL,UAAW,CAACA,UAAUxE,EAAE9D,KAAF,CAAQhD,EAAnB,IAAyBoL,WAAjD;;UAEItE,EAAE9D,KAAF,CAAQoB,IAAR,KAAiB,OAArB,EAA8B;UAC1BpB,KAAF,CAAQ9C,EAAR,GAAamL,UAAW,CAACA,UAAUvE,EAAE9D,KAAF,CAAQ9C,EAAnB,IAAyBkL,WAAjD;UACEpI,KAAF,CAAQ7C,EAAR,GAAamL,UAAW,CAACA,UAAUxE,EAAE9D,KAAF,CAAQ7C,EAAnB,IAAyBiL,WAAjD;;;;;SAKCtE,CAAP;CA5BF;;AA+BA,IAAMyE,QAAQ,SAARA,KAAQ,CAAChI,CAAD,EAAI6H,WAAJ,EAAuC;MAAtBI,MAAsB,uEAAb,QAAa;;qBACNhE,YAAYjE,CAAZ,CADM;MAC3CkE,MAD2C,gBAC3CA,MAD2C;MACnCyD,MADmC,gBACnCA,MADmC;MAC3BxD,IAD2B,gBAC3BA,IAD2B;MACrBC,KADqB,gBACrBA,KADqB;MACdC,GADc,gBACdA,GADc;;MAG/CyD,UAAUH,OAAO7L,CAArB;MACIiM,UAAUJ,OAAO5L,CAArB;;UAEQkM,MAAR;SACO,SAAL;gBACY9D,IAAV;gBACUE,GAAV;;SAEG,UAAL;gBACYD,KAAV;gBACUC,GAAV;;SAEG,aAAL;gBACYD,KAAV;gBACUF,MAAV;;SAEG,YAAL;gBACYC,IAAV;gBACUD,MAAV;;;;SAIGpE,kBAAkB;WAASK,MAAMX,GAAN,CAAU,iBAAS;aAC5CoI,WAAWhH,KAAX,EAAkBiH,WAAlB,EAA+BC,OAA/B,EAAwCC,OAAxC,CAAP;KADgC,CAAT;GAAlB,EAEH/H,CAFG,CAAP;CAzBF;;;;;;;;;;;;;;;;;;;;;;"}